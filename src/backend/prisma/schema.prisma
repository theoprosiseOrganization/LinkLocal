// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String        @id @default(uuid()) @db.Uuid
  name        String
  email       String        @unique
  password    String
  avatar      String?
  preferences String
  followers   Follows[]     @relation("following")
  following   Follows[]     @relation("follower")
  events      Event[]       @relation("UserEvents")
  likedEvents Event[]       @relation("LikedEvents")
  polygons    UserPoly[]    @relation("UserPoly")
  geoLocation UserLocation? // Link to spatial location
  tags Tag[] @relation("UserTags")
}

model Follows {
  follower    User   @relation("follower", fields: [followerId], references: [id])
  followerId  String @db.Uuid
  following   User   @relation("following", fields: [followingId], references: [id])
  followingId String @db.Uuid

  @@id([followerId, followingId])
}

model UserLocation {
  id            String                              @id @default(uuid()) @db.Uuid
  location      Unsupported("geometry(Point,4326)") // PostGIS geometry type
  streetAddress String
  user          User                                @relation(fields: [userId], references: [id])
  userId        String                              @unique @db.Uuid

  @@map("user_locations")
}

model UserPoly {
  id         String                                @id @default(uuid()) @db.Uuid
  polygon    Unsupported("geometry(Polygon,4326)")
  userId     String                                @unique @db.Uuid
  user       User                                  @relation("UserPoly", fields: [userId], references: [id])
  activeFlag String
}

model Event {
  id              String         @id @default(uuid()) @db.Uuid
  userId          String         @db.Uuid
  user            User           @relation("UserEvents", fields: [userId], references: [id])
  title           String
  images          String[]
  textDescription String
  likes           User[]         @relation("LikedEvents")
  geoLocation     EventLocation? // Link to spatial location
  tags Tag[] @relation("EventTags")
  startTime      DateTime? // For one-time or first occurrence
  endTime        DateTime? // For one-time or first occurrence
  recurrenceRule String?   // iCal RRULE string 
  recurrenceEnd  DateTime? // When recurrence stops, if applicable
}

model EventLocation {
  id            String                              @id @default(uuid()) @db.Uuid
  location      Unsupported("geometry(Point,4326)")
  streetAddress String
  event         Event                               @relation(fields: [eventId], references: [id])
  eventId       String                              @unique @db.Uuid

  @@map("event_locations")
}

model Tag {
  id     String   @id @default(uuid()) @db.Uuid
  name   String   @unique
  users  User[]   @relation("UserTags")
  events Event[]  @relation("EventTags")
}